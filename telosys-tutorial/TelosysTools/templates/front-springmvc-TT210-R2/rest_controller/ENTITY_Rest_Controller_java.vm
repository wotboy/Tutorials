#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
## -----------------------------------------------------------------------------------------------------------------------------
## --- Primary Key arguments by getters, e.g. "review.getCustomerCode(), review.getBookId()"
#set( $pkElementsGetters = $fn.argumentsListWithGetter($uncapitalizedEntityName, $entity.keyAttributes) )
## -----------------------------------------------------------------------------------------------------------------------------
## --- Primary Key arguments, e.g. "customerCode, bookId"
#set( $pkElementsVariables = $fn.argumentsList($entity.keyAttributes) )
## -----------------------------------------------------------------------------------------------------------------------------
## --- Primary Key request path, e.g. "{customerCode}/{bookId}"
#set( $pkPath = "" )
#foreach( $attribute in $entity.keyAttributes )
#if( $foreach.count > 1 )
#set( $pkPath = "${pkPath}/" )
#end
#set( $pkPath = "${pkPath}{${attribute.name}}" )
#end
## -----------------------------------------------------------------------------------------------------------------------------
## --- Primary Key Path Variables, e.g. "@PathVariable("customerCode") String customerCode, @PathVariable("bookId") Integer bookId"
#set( $pkPathVariables = "" )
#foreach( $attribute in $entity.keyAttributes )
#if( $foreach.count > 1 )
#set( $pkPathVariables = "${pkPathVariables}, " )
#end
#set( $pkPathVariables = "${pkPathVariables}@PathVariable(${QUOT}${attribute.name}${QUOT}) $attribute.type $attribute.name" )
#end
## -----------------------------------------------------------------------------------------------------------------------------
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder($SRC)};

import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import ${ENTITY_PKG}.${entity.name};
import ${ROOT_PKG}.business.service.${entity.name}Service;
import ${ROOT_PKG}.web.listitem.${entity.name}ListItem;

/**
 * Spring MVC controller for '${entity.name}' management.
 */
@Controller
public class ${entity.name}RestController {

	@Resource
	private ${entity.name}Service ${uncapitalizedEntityName}Service;
	
	@RequestMapping( value="/items/${uncapitalizedEntityName}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<${entity.name}ListItem> findAllAsListItems() {
		List<${entity.name}> list = ${uncapitalizedEntityName}Service.findAll();
		List<${entity.name}ListItem> items = new LinkedList<${entity.name}ListItem>();
		for ( ${entity.name} ${uncapitalizedEntityName} : list ) {
			items.add(new ${entity.name}ListItem( ${uncapitalizedEntityName} ) );
		}
		return items;
	}
	
	@RequestMapping( value="/${uncapitalizedEntityName}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<${entity.name}> findAll() {
		return ${uncapitalizedEntityName}Service.findAll();
	}

	@RequestMapping( value="/${uncapitalizedEntityName}/${pkPath}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public ${entity.name} findOne(${pkPathVariables}) {
		return ${uncapitalizedEntityName}Service.findById(${pkElementsVariables});
	}
	
	@RequestMapping( value="/${uncapitalizedEntityName}",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public ${entity.name} create(@RequestBody ${entity.name} ${uncapitalizedEntityName}) {
		return ${uncapitalizedEntityName}Service.create(${uncapitalizedEntityName});
	}

	@RequestMapping( value="/${uncapitalizedEntityName}/${pkPath}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public ${entity.name} update(${pkPathVariables}, @RequestBody ${entity.name} ${uncapitalizedEntityName}) {
		return ${uncapitalizedEntityName}Service.update(${uncapitalizedEntityName});
	}

	@RequestMapping( value="/${uncapitalizedEntityName}/${pkPath}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(${pkPathVariables}) {
		${uncapitalizedEntityName}Service.delete(${pkElementsVariables});
	}
	
}
