#set($uncapitalizedEntityName = $fn.uncapitalize(${entity.name}) )
## MAP : key = Java Type, value = MockValues method name 
#set ( $map = { 
  "byte"   : "nextByte()",     "java.lang.Byte"    : "nextByte()",  
  "short"  : "nextShort()",    "java.lang.Short"   : "nextShort()", 
  "int"    : "nextInteger()",  "java.lang.Integer" : "nextInteger()", 
  "long"   : "nextLong()",     "java.lang.Long"    : "nextLong()", 
  "float"  : "nextFloat()",    "java.lang.Float"   : "nextFloat()", 
  "double" : "nextDouble()",   "java.lang.Double"  : "nextDouble()", 
  "java.math.BigDecimal" : "nextBigDecimal()", 
  "java.util.Date"       : "nextDate()", 
  "java.sql.Date"        : "nextSqlDate()", 
  "java.sql.Time"        : "nextSqlTime()", 
  "java.sql.Timestamp"   : "nextSqlTimestamp()"
} )
#set( $package = ${target.javaPackageFromFolder($SRC)} )
## ------------------------------------------------------------------
#macro( mockMethod $field )
#if ( $field.type == "String" )
#set ( $methodName = "nextString($field.databaseSize)" )
#else
#set ( $methodName = $map.get(${field.fullType}) )
#end
${methodName}#end
## ------------------------------------------------------------------
#if( $entity.hasCompositePrimaryKey() )
#set( $entityKeyType = ${entity.name} + "EntityKey" )
#else
#set( $entityKeyType = ${entity.keyAttributes[0].formattedType(0)} )
#set( $entityKeyAttribute = ${entity.keyAttributes[0]} )
#end
## --- Primary Key arguments, e.g. "customerCode, ${fn.uncapitalize($entity.name)}Id"
#set( $pkElementsVariables = $fn.argumentsList($entity.keyAttributes) )
##--------------------------------------------------------------------------------------------------------
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder(${TEST_SRC})};

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import ${ENTITY_PKG}.${entity.name};
import ${ENTITY_PKG}.jpa.${entity.name}Entity;
#if( $entity.hasCompositePrimaryKey() )
import ${ENTITY_PKG}.jpa.${entity.name}EntityKey;
#end
#foreach( $import in $java.imports($entity) )
import $import;
#end
import ${ROOT_PKG}.business.service.mapping.${entity.name}ServiceMapper;
import ${ROOT_PKG}.data.repository.jpa.${entity.name}JpaRepository;
import ${ROOT_PKG}.test.${entity.name}FactoryForTest;
import ${ROOT_PKG}.test.${entity.name}EntityFactoryForTest;
import ${ROOT_PKG}.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ${entity.name}Service
 */
@RunWith(MockitoJUnitRunner.class)
public class ${entity.name}ServiceImplTest {

	@InjectMocks
	private ${entity.name}ServiceImpl ${uncapitalizedEntityName}Service;
	@Mock
	private ${entity.name}JpaRepository ${fn.uncapitalize($entity.name)}JpaRepository;
	@Mock
	private ${entity.name}ServiceMapper ${fn.uncapitalize($entity.name)}ServiceMapper;
	
	private ${entity.name}FactoryForTest ${fn.uncapitalize($entity.name)}FactoryForTest = new ${entity.name}FactoryForTest();

	private ${entity.name}EntityFactoryForTest ${fn.uncapitalize($entity.name)}EntityFactoryForTest = new ${entity.name}EntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
#foreach( $attr in $entity.keyAttributes )
		${attr.type} ${attr.name} = mockValues.#mockMethod($attr);
#end
		
#if( $entity.hasCompositePrimaryKey() )
		${entityKeyType} ${fn.uncapitalize($entityKeyType)} = new ${entityKeyType}(${fn.argumentsList($entity.keyAttributes)});
#foreach( $attr in $entity.keyAttributes )
		${fn.uncapitalize($entityKeyType)}.${attr.setter}(${attr.name});
#end
		
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = ${fn.uncapitalize($entity.name)}JpaRepository.findOne(${fn.uncapitalize($entityKeyType)});
#else
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = ${fn.uncapitalize($entity.name)}JpaRepository.findOne(${fn.argumentsList($entity.keyAttributes)});
#end
		
		${entity.name} ${fn.uncapitalize($entity.name)} = ${fn.uncapitalize($entity.name)}FactoryForTest.new${entity.name}();
		when(${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}EntityTo${entity.name}(${fn.uncapitalize($entity.name)}Entity)).thenReturn(${fn.uncapitalize($entity.name)});

		// When
		${entity.name} ${uncapitalizedEntityName}Found = ${uncapitalizedEntityName}Service.findById(${pkElementsVariables});

		// Then
#if( $entity.hasCompositePrimaryKey() )
#foreach( $attr in $entity.keyAttributes )
		assertEquals(${fn.uncapitalize($entity.name)}.${attr.getter}(),${fn.uncapitalize($entity.name)}Found.${attr.getter}());
#end
#else
		assertEquals(${fn.uncapitalize($entity.name)}.${entityKeyAttribute.getter}(),${fn.uncapitalize($entity.name)}Found.${entityKeyAttribute.getter}());
#end
	}

	@Test
	public void findAll() {
		// Given
		List<${entity.name}Entity> ${fn.uncapitalize($entity.name)}Entitys = new ArrayList<${entity.name}Entity>();
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity1 = ${fn.uncapitalize($entity.name)}EntityFactoryForTest.new${entity.name}Entity();
		${fn.uncapitalize($entity.name)}Entitys.add(${fn.uncapitalize($entity.name)}Entity1);
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity2 = ${fn.uncapitalize($entity.name)}EntityFactoryForTest.new${entity.name}Entity();
		${fn.uncapitalize($entity.name)}Entitys.add(${fn.uncapitalize($entity.name)}Entity2);
		when(${fn.uncapitalize($entity.name)}JpaRepository.findAll()).thenReturn(${fn.uncapitalize($entity.name)}Entitys);
		
		${entity.name} ${fn.uncapitalize($entity.name)}1 = ${fn.uncapitalize($entity.name)}FactoryForTest.new${entity.name}();
		when(${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}EntityTo${entity.name}(${fn.uncapitalize($entity.name)}Entity1)).thenReturn(${fn.uncapitalize($entity.name)}1);
		${entity.name} ${fn.uncapitalize($entity.name)}2 = ${fn.uncapitalize($entity.name)}FactoryForTest.new${entity.name}();
		when(${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}EntityTo${entity.name}(${fn.uncapitalize($entity.name)}Entity2)).thenReturn(${fn.uncapitalize($entity.name)}2);

		// When
		List<${entity.name}> ${uncapitalizedEntityName}sFounds = ${uncapitalizedEntityName}Service.findAll();

		// Then
		assertTrue(${uncapitalizedEntityName}1 == ${fn.uncapitalize($entity.name)}sFounds.get(0));
		assertTrue(${uncapitalizedEntityName}2 == ${fn.uncapitalize($entity.name)}sFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		${entity.name} ${fn.uncapitalize($entity.name)} = ${fn.uncapitalize($entity.name)}FactoryForTest.new${entity.name}();

#if( $entity.hasCompositePrimaryKey() )
		${entityKeyType} id = new ${entityKeyType}(${fn.argumentsListWithGetter($fn.uncapitalize($entity.name),$entity.keyAttributes)});
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = ${fn.uncapitalize($entity.name)}EntityFactoryForTest.new${entity.name}Entity();
		when(${fn.uncapitalize($entity.name)}JpaRepository.findOne(id)).thenReturn(null);
#else
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = ${fn.uncapitalize($entity.name)}EntityFactoryForTest.new${entity.name}Entity();
		when(${fn.uncapitalize($entity.name)}JpaRepository.findOne(${fn.argumentsListWithGetter($fn.uncapitalize($entity.name),$entity.keyAttributes)})).thenReturn(null);
#end
		
		${fn.uncapitalize($entity.name)}Entity = new ${entity.name}Entity();
		${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}To${entity.name}Entity(${fn.uncapitalize($entity.name)}, ${fn.uncapitalize($entity.name)}Entity);
		${entity.name}Entity ${fn.uncapitalize($entity.name)}EntitySaved = ${fn.uncapitalize($entity.name)}JpaRepository.save(${fn.uncapitalize($entity.name)}Entity);
		
		${entity.name} ${fn.uncapitalize($entity.name)}Saved = ${fn.uncapitalize($entity.name)}FactoryForTest.new${entity.name}();
		when(${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}EntityTo${entity.name}(${fn.uncapitalize($entity.name)}EntitySaved)).thenReturn(${fn.uncapitalize($entity.name)}Saved);

		// When
		${entity.name} ${uncapitalizedEntityName}Result = ${uncapitalizedEntityName}Service.create(${fn.uncapitalize($entity.name)});

		// Then
		assertTrue(${uncapitalizedEntityName}Result == ${fn.uncapitalize($entity.name)}Saved);
	}

	@Test
	public void createKOExists() {
		// Given
		${entity.name} ${fn.uncapitalize($entity.name)} = ${fn.uncapitalize($entity.name)}FactoryForTest.new${entity.name}();

#if( $entity.hasCompositePrimaryKey() )
		${entityKeyType} id = new ${entityKeyType}(${fn.argumentsListWithGetter($fn.uncapitalize($entity.name),$entity.keyAttributes)});
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = ${fn.uncapitalize($entity.name)}EntityFactoryForTest.new${entity.name}Entity();
		when(${fn.uncapitalize($entity.name)}JpaRepository.findOne(id)).thenReturn(${fn.uncapitalize($entity.name)}Entity);
#else
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = ${fn.uncapitalize($entity.name)}EntityFactoryForTest.new${entity.name}Entity();
		when(${fn.uncapitalize($entity.name)}JpaRepository.findOne(${fn.argumentsListWithGetter($fn.uncapitalize($entity.name),$entity.keyAttributes)})).thenReturn(${fn.uncapitalize($entity.name)}Entity);
#end

		// When
		Exception exception = null;
		try {
			${uncapitalizedEntityName}Service.create(${fn.uncapitalize($entity.name)});
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		${entity.name} ${fn.uncapitalize($entity.name)} = ${fn.uncapitalize($entity.name)}FactoryForTest.new${entity.name}();

#if( $entity.hasCompositePrimaryKey() )
		${entityKeyType} id = new ${entityKeyType}(${fn.argumentsListWithGetter($fn.uncapitalize($entity.name),$entity.keyAttributes)});
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = ${fn.uncapitalize($entity.name)}EntityFactoryForTest.new${entity.name}Entity();
		when(${fn.uncapitalize($entity.name)}JpaRepository.findOne(id)).thenReturn(${fn.uncapitalize($entity.name)}Entity);
#else
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = ${fn.uncapitalize($entity.name)}EntityFactoryForTest.new${entity.name}Entity();
		when(${fn.uncapitalize($entity.name)}JpaRepository.findOne(${fn.argumentsListWithGetter($fn.uncapitalize($entity.name),$entity.keyAttributes)})).thenReturn(${fn.uncapitalize($entity.name)}Entity);
#end
		
		${entity.name}Entity ${fn.uncapitalize($entity.name)}EntitySaved = ${fn.uncapitalize($entity.name)}EntityFactoryForTest.new${entity.name}Entity();
		when(${fn.uncapitalize($entity.name)}JpaRepository.save(${fn.uncapitalize($entity.name)}Entity)).thenReturn(${fn.uncapitalize($entity.name)}EntitySaved);
		
		${entity.name} ${fn.uncapitalize($entity.name)}Saved = ${fn.uncapitalize($entity.name)}FactoryForTest.new${entity.name}();
		when(${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}EntityTo${entity.name}(${fn.uncapitalize($entity.name)}EntitySaved)).thenReturn(${fn.uncapitalize($entity.name)}Saved);

		// When
		${entity.name} ${uncapitalizedEntityName}Result = ${uncapitalizedEntityName}Service.update(${fn.uncapitalize($entity.name)});

		// Then
		verify(${fn.uncapitalize($entity.name)}ServiceMapper).map${entity.name}To${entity.name}Entity(${fn.uncapitalize($entity.name)}, ${fn.uncapitalize($entity.name)}Entity);
		assertTrue(${uncapitalizedEntityName}Result == ${fn.uncapitalize($entity.name)}Saved);
	}

	@Test
	public void delete() {
		// Given
#foreach( $attr in $entity.keyAttributes )
		${attr.type} ${attr.name} = mockValues.#mockMethod($attr);
#end
#if( $entity.hasCompositePrimaryKey() )
		${entityKeyType} ${fn.uncapitalize($entityKeyType)} = new ${entityKeyType}($fn.argumentsList($entity.keyAttributes));
#end

		// When
		${uncapitalizedEntityName}Service.delete(${fn.argumentsList($entity.keyAttributes)});

		// Then
#if( $entity.hasCompositePrimaryKey() )
		verify(${fn.uncapitalize($entity.name)}JpaRepository).delete(${fn.uncapitalize($entityKeyType)});
#else
		verify(${fn.uncapitalize($entity.name)}JpaRepository).delete(${fn.argumentsList($entity.keyAttributes)});
#end
		
	}

}
