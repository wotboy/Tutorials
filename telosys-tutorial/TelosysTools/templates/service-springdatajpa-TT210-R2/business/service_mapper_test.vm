#set($uncapitalizedEntityName = $fn.uncapitalize(${entity.name}) )
## MAP : key = Java Type, value = MockValues method name 
#set ( $map = { 
  "byte"   : "nextByte()",     "java.lang.Byte"    : "nextByte()",  
  "short"  : "nextShort()",    "java.lang.Short"   : "nextShort()", 
  "int"    : "nextInteger()",  "java.lang.Integer" : "nextInteger()", 
  "long"   : "nextLong()",     "java.lang.Long"    : "nextLong()", 
  "float"  : "nextFloat()",    "java.lang.Float"   : "nextFloat()", 
  "double" : "nextDouble()",   "java.lang.Double"  : "nextDouble()", 
  "java.math.BigDecimal" : "nextBigDecimal()", 
  "java.util.Date"       : "nextDate()", 
  "java.sql.Date"        : "nextSqlDate()", 
  "java.sql.Time"        : "nextSqlTime()", 
  "java.sql.Timestamp"   : "nextSqlTimestamp()"
} )
#set( $package = ${target.javaPackageFromFolder($SRC)} )
## ------------------------------------------------------------------
#macro( mockMethod $field )
#if ( $field.type == "String" )
#set ( $methodName = "nextString($field.databaseSize)" )
#else
#set ( $methodName = $map.get(${field.fullType}) )
#end
${methodName}#end
## ------------------------------------------------------------------
## Data fields = fields not in Primary Key and not in selected Links    
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder(${TEST_SRC})};

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import ${ENTITY_PKG}.${entity.name};
import ${ENTITY_PKG}.jpa.${entity.name}Entity;
#foreach( $link in $entity.selectedLinks )
#if( ( $link.isCardinalityOneToOne() || $link.isCardinalityManyToOne() ) && $link.isOwningSide() && $link.hasAttributeInPrimaryKey() == false )
import ${ENTITY_PKG}.jpa.${link.targetEntitySimpleType}Entity;
#end
#end
import ${ROOT_PKG}.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class ${entity.name}ServiceMapperTest {

	private ${entity.name}ServiceMapper ${uncapitalizedEntityName}ServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		${uncapitalizedEntityName}ServiceMapper = new ${entity.name}ServiceMapper();
		${uncapitalizedEntityName}ServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from '${entity.name}Entity' to '${entity.name}'
	 * @param ${uncapitalizedEntityName}Entity
	 */
	@Test
	public void testMap${entity.name}EntityTo${entity.name}() {
		// Given
		${entity.name}Entity ${uncapitalizedEntityName}Entity = new ${entity.name}Entity();
#foreach( $attr in $dataFields )
		${uncapitalizedEntityName}Entity.${attr.setter}(mockValues.#mockMethod($attr));
#end
#foreach( $link in $entity.selectedLinks )
#if( ( $link.isCardinalityOneToOne() || $link.isCardinalityManyToOne() ) && $link.isOwningSide() && $link.hasAttributeInPrimaryKey() == false )
		${uncapitalizedEntityName}Entity.${link.setter}(new ${link.targetEntity.name}Entity());
#foreach( $linkAttribute in $link.attributes )
		${uncapitalizedEntityName}Entity.${link.getter}().${linkAttribute.targetAttribute.setter}(mockValues.#mockMethod(${linkAttribute.targetAttribute}));
#end
#end
#end
		
		// When
		${entity.name} ${uncapitalizedEntityName} = ${uncapitalizedEntityName}ServiceMapper.map${entity.name}EntityTo${entity.name}(${uncapitalizedEntityName}Entity);
		
		// Then
#foreach( $attr in $dataFields )
		assertEquals(${uncapitalizedEntityName}Entity.${attr.getter}(), ${uncapitalizedEntityName}.${attr.getter}());
#end
#foreach( $link in $entity.selectedLinks )
#if( ( $link.isCardinalityOneToOne() || $link.isCardinalityManyToOne() ) && $link.isOwningSide() && $link.hasAttributeInPrimaryKey() == false )
#foreach( $linkAttribute in $link.attributes )
		assertEquals(${uncapitalizedEntityName}Entity.${link.getter}().${linkAttribute.targetAttribute.getter}(), ${uncapitalizedEntityName}.${linkAttribute.originAttribute.getter}());
#end
#end
#end
	}
	
	/**
	 * Test : Mapping from '${entity.name}' to '${entity.name}Entity'
	 */
	@Test
	public void testMap${entity.name}To${entity.name}Entity() {
		// Given
		${entity.name} ${uncapitalizedEntityName} = new ${entity.name}();
#foreach( $attr in $dataFields )
		${uncapitalizedEntityName}.${attr.setter}(mockValues.#mockMethod($attr));
#end
#foreach( $link in $entity.selectedLinks )
#if( ( $link.isCardinalityOneToOne() || $link.isCardinalityManyToOne() ) && $link.isOwningSide() && $link.hasAttributeInPrimaryKey() == false )
#foreach( $linkAttribute in $link.attributes )
		${uncapitalizedEntityName}.${linkAttribute.originAttribute.setter}(mockValues.#mockMethod(${linkAttribute.originAttribute}));
#end
#end
#end

		${entity.name}Entity ${uncapitalizedEntityName}Entity = new ${entity.name}Entity();
		
		// When
		${uncapitalizedEntityName}ServiceMapper.map${entity.name}To${entity.name}Entity(${uncapitalizedEntityName}, ${uncapitalizedEntityName}Entity);
		
		// Then
#foreach( $attr in $dataFields )
		assertEquals(${uncapitalizedEntityName}.${attr.getter}(), ${uncapitalizedEntityName}Entity.${attr.getter}());
#end
#foreach( $link in $entity.selectedLinks )
#if( ( $link.isCardinalityOneToOne() || $link.isCardinalityManyToOne() ) && $link.isOwningSide() && $link.hasAttributeInPrimaryKey() == false )
#foreach( $linkAttribute in $link.attributes )
		assertEquals(${uncapitalizedEntityName}.${linkAttribute.originAttribute.getter}(), ${uncapitalizedEntityName}Entity.${link.getter}().${linkAttribute.targetAttribute.getter}());
#end
#end
#end
	}

}